import type { InstanceOptions } from '@vtex/api';
export declare const withMiddlwares: (middlewares: Required<InstanceOptions>['middlewares'], options: InstanceOptions) => {
    middlewares: import("koa-compose").Middleware<import("@vtex/api").MiddlewareContext>[];
    authType?: import("@vtex/api").AuthType | undefined;
    timeout?: number | undefined;
    memoryCache?: import("@vtex/api").CacheLayer<string, import("@vtex/api").Cached> | undefined;
    diskCache?: import("@vtex/api").CacheLayer<string, import("@vtex/api").Cached> | undefined;
    baseURL?: string | undefined;
    retries?: number | undefined;
    exponentialTimeoutCoefficient?: number | undefined;
    initialBackoffDelay?: number | undefined;
    exponentialBackoffCoefficient?: number | undefined;
    metrics?: import("@vtex/api").MetricsAccumulator | undefined;
    concurrency?: number | undefined;
    headers?: Record<string, string> | undefined;
    params?: Record<string, string> | undefined;
    verbose?: boolean | undefined;
    name?: string | undefined;
    serverTimings?: Record<string, string> | undefined;
    httpsAgent?: any;
};
export declare const useHTTP: (str: string) => string;
export declare const renameKeys: import("ramda").CurriedFunction2<{
    [key: string]: string;
}, Record<string, unknown>, {}>;
