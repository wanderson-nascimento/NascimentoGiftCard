import type { InstanceOptions, IOContext, RequestTracingConfig } from '@vtex/api';
import { ExternalClient } from '@vtex/api';
export declare class Payments extends ExternalClient {
    protected context: IOContext;
    constructor(context: IOContext, options?: InstanceOptions);
    retry: (url: string, tracingConfig?: RequestTracingConfig | undefined) => Promise<unknown>;
    callback: (url: string, callback?: import("../service/typings/api").ApprovedAuthorization | import("../service/typings/api").CreditCardAuthorized | import("../service/typings/api").BankInvoiceAuthorized | import("../service/typings/api").PendingAuthorization | import("../service/typings/api").FailedAuthorization | import("../service/typings/api").RedirectResponse | undefined, tracingConfig?: RequestTracingConfig | undefined) => Promise<unknown>;
    inbound: <TRequest, TResponse>(transactionId: string, paymentId: string, action: string, payload: TRequest, tracingConfig?: RequestTracingConfig | undefined) => Promise<TResponse>;
}
