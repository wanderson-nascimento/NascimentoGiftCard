import type { Overwrite } from 'utility-types';
import type { ApprovedAuthorization, AuthorizationRequest, BankInvoiceAuthorization, BankInvoiceAuthorized, CancellationRequest, CancellationResponse, CardAuthorization, CreditCardAuthorized, FailedAuthorization, RedirectResponse, RefundRequest, RefundResponse, SettlementRequest, SettlementResponse, PendingAuthorization, AppData, BankInvoicePending } from './typings/api';
declare type OptionalKeys<T> = Exclude<{
    [key in keyof T]: undefined extends T[key] ? key : never;
}[keyof T], undefined>;
declare type OptionalUndefined<T extends Record<string, unknown>> = Overwrite<T, {
    [key in keyof Pick<T, OptionalKeys<T>>]?: T[key];
}>;
export declare type ApproveArgs = OptionalUndefined<Omit<ApprovedAuthorization, keyof AuthorizationRequest | 'status' | 'delayToCancel'>>;
export declare type ApproveCardArgs = OptionalUndefined<Omit<CreditCardAuthorized, keyof CardAuthorization | 'status' | 'delayToCancel'>>;
export declare type ApproveBankInvoiceArgs = OptionalUndefined<Omit<BankInvoiceAuthorized, keyof BankInvoiceAuthorization | 'status' | 'delayToCancel'>>;
export declare type DenyArgs = OptionalUndefined<Omit<FailedAuthorization, keyof AuthorizationRequest | 'status'>>;
export declare type PendingArgs = OptionalUndefined<Omit<PendingAuthorization, keyof AuthorizationRequest | 'status'>>;
export declare type PendingBankInvoiceArgs = OptionalUndefined<Omit<BankInvoicePending, keyof AuthorizationRequest | 'status'>>;
export declare type PaymentAppArgs = OptionalUndefined<Overwrite<Omit<RedirectResponse, keyof AuthorizationRequest | 'status' | 'redirectUrl'>, {
    paymentAppData: AppData;
}>>;
export declare type RedirectUrlArgs = OptionalUndefined<Overwrite<Omit<RedirectResponse, keyof AuthorizationRequest | 'status' | 'paymentAppData'>, {
    redirectUrl: string;
}>>;
export declare type ActionRequired = PaymentAppArgs | RedirectUrlArgs;
export declare const Authorizations: {
    approve: ({ paymentId }: AuthorizationRequest, approveArgs: ApproveArgs) => ApprovedAuthorization;
    approveCard: ({ paymentId }: CardAuthorization, approvedCardArgs: ApproveCardArgs) => CreditCardAuthorized;
    approveBankInvoice: ({ paymentId }: BankInvoiceAuthorization, approvedBankInvoiceArgs: ApproveBankInvoiceArgs) => BankInvoiceAuthorized;
    deny: ({ paymentId }: AuthorizationRequest, denyArgs?: Pick<Pick<Pick<FailedAuthorization, "message" | "delayToCancel" | "tid" | "authorizationId" | "acquirer" | "delayToAutoSettle" | "delayToAutoSettleAfterAntifraud" | "code">, never> & Pick<{
        message?: import("@vtex/api").Maybe<string>;
        delayToCancel?: number | null | undefined;
        tid?: import("@vtex/api").Maybe<string>;
        authorizationId?: import("@vtex/api").Maybe<string>;
        acquirer?: import("@vtex/api").Maybe<string>;
        delayToAutoSettle?: number | null | undefined;
        delayToAutoSettleAfterAntifraud?: number | null | undefined;
        code?: import("@vtex/api").Maybe<string>;
    }, "message" | "delayToCancel" | "tid" | "authorizationId" | "acquirer" | "delayToAutoSettle" | "delayToAutoSettleAfterAntifraud" | "code">, "message" | "delayToCancel" | "tid" | "authorizationId" | "acquirer" | "delayToAutoSettle" | "delayToAutoSettleAfterAntifraud" | "code"> | undefined) => FailedAuthorization;
    pending: ({ paymentId }: AuthorizationRequest, pendingArgs: PendingArgs) => PendingAuthorization;
    pendingBankInvoice: ({ paymentId }: AuthorizationRequest, pendingArgs: PendingBankInvoiceArgs) => BankInvoicePending;
    redirect: ({ paymentId }: AuthorizationRequest, actionRequired: ActionRequired) => RedirectResponse | PendingAuthorization;
};
export interface ApproveCancellationArgs {
    cancellationId: string;
    code?: CancellationResponse['code'];
    message?: string;
}
export declare type ManualCancellationArgs = Omit<ApproveCancellationArgs, 'cancellationId'>;
export declare type DenyCancellationArgs = ManualCancellationArgs;
export declare const Cancellations: {
    approve: ({ paymentId }: CancellationRequest, cancellationArgs: ApproveCancellationArgs) => CancellationResponse;
    manual: ({ paymentId }: CancellationRequest, cancellationArgs?: Pick<ApproveCancellationArgs, "message" | "code"> | undefined) => CancellationResponse;
    deny: ({ paymentId }: CancellationRequest, cancellationArgs?: Pick<ApproveCancellationArgs, "message" | "code"> | undefined) => CancellationResponse;
};
export interface ApproveRefundArgs {
    refundId: string;
    code?: RefundResponse['code'];
    message?: string;
}
export declare type DenyRefundArgs = Omit<ApproveRefundArgs, 'refundId'>;
export declare type ManualRefundArgs = DenyRefundArgs;
export declare const Refunds: {
    approve: ({ paymentId, requestId, value }: RefundRequest, refundArgs: ApproveRefundArgs) => RefundResponse;
    manual: ({ paymentId, requestId }: RefundRequest, refundArgs?: Pick<ApproveRefundArgs, "message" | "code"> | undefined) => RefundResponse;
    deny: ({ paymentId, requestId }: RefundRequest, refundArgs?: Pick<ApproveRefundArgs, "message" | "code"> | undefined) => RefundResponse;
};
export interface ApproveSettlementArgs {
    settleId: string;
    code?: SettlementResponse['code'];
    message?: string;
}
export declare type DenySettlementArgs = Omit<ApproveSettlementArgs, 'settleId'>;
export declare const getCallbackUrl: (request: AuthorizationRequest | string) => string;
export declare const Settlements: {
    approve: ({ paymentId, requestId, value }: SettlementRequest, settleArgs: ApproveSettlementArgs) => SettlementResponse;
    deny: ({ paymentId, requestId }: SettlementRequest, settleArgs?: Pick<ApproveSettlementArgs, "message" | "code"> | undefined) => SettlementResponse;
};
export {};
