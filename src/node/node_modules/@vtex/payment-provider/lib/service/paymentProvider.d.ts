import type { IOClients, ParamsContext, ServiceContext } from '@vtex/api';
import type { PaymentProviderState } from '.';
import type { AuthorizationRequest, AuthorizationResponse, CancellationRequest, CancellationResponse, InboundRequest, InboundResponse, RefundRequest, RefundResponse, SettlementRequest, SettlementResponse } from './typings/api';
export declare abstract class PaymentProvider<ClientsT extends IOClients = IOClients, StateT extends PaymentProviderState = PaymentProviderState, CustomT extends ParamsContext = ParamsContext> {
    protected context: ServiceContext<ClientsT, StateT, CustomT>;
    protected apiKey: string;
    protected appToken: string;
    protected isTestSuite: boolean;
    private payments;
    constructor(context: ServiceContext<ClientsT, StateT, CustomT>);
    retry(request: AuthorizationRequest | string): Promise<unknown>;
    callback(request: AuthorizationRequest | string, data?: AuthorizationResponse): Promise<unknown>;
    abstract authorize(authorization: AuthorizationRequest): Promise<AuthorizationResponse>;
    abstract cancel(cancellation: CancellationRequest): Promise<CancellationResponse>;
    abstract refund(refund: RefundRequest): Promise<RefundResponse>;
    abstract settle(settlement: SettlementRequest): Promise<SettlementResponse>;
    abstract inbound?(inbound: InboundRequest): Promise<InboundResponse>;
}
export default PaymentProvider;
