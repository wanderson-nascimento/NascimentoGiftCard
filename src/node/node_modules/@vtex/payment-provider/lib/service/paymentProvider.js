"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentProvider = void 0;
const ramda_1 = require("ramda");
const _1 = require(".");
const clients_1 = require("../clients");
const VTEX_PROVIDER_KEY = 'x-provider-api-appkey';
const VTEX_PROVIDER_TOKEN = 'x-provider-api-apptoken';
const VTEX_TEST_SUITE = 'x-vtex-api-is-testsuite';
const VTEX_API_APPKEY = 'x-vtex-api-appkey';
const VTEX_API_APPTOKEN = 'x-vtex-api-apptoken';
class PaymentProvider {
    constructor(context) {
        var _a, _b;
        this.context = context;
        this.apiKey = (_a = context.headers[VTEX_PROVIDER_KEY]) !== null && _a !== void 0 ? _a : context.headers[VTEX_API_APPKEY];
        this.appToken = (_b = context.headers[VTEX_PROVIDER_TOKEN]) !== null && _b !== void 0 ? _b : context.headers[VTEX_API_APPTOKEN];
        this.isTestSuite = context.headers[VTEX_TEST_SUITE] === 'true';
        const headers = ramda_1.pick([VTEX_API_APPKEY, VTEX_API_APPTOKEN], context.headers);
        this.payments = new clients_1.Payments(context.vtex, { headers });
    }
    async retry(request) {
        const callbackUrl = _1.getCallbackUrl(request);
        return this.payments.retry(callbackUrl);
    }
    async callback(request, data) {
        const callbackUrl = _1.getCallbackUrl(request);
        return this.payments.callback(callbackUrl, data);
    }
}
exports.PaymentProvider = PaymentProvider;
exports.default = PaymentProvider;
