"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTokenizedCard = exports.isDirectSaleAuthorization = exports.isBankInvoiceAuthorization = exports.isDebitCardAuthorization = exports.isCreditCardAuthorization = exports.isCardAuthorization = exports.Cryptocurrency = exports.Voucher = exports.Generic = exports.BankInvoice = exports.AdhocCard = exports.DirectSale = exports.CreditCard = exports.DebitCard = exports.DocumentType = exports.RecipientRole = void 0;
const ramda_1 = require("ramda");
const typescript_string_enums_1 = require("typescript-string-enums");
exports.RecipientRole = typescript_string_enums_1.Enum('marketplace', 'seller');
exports.DocumentType = typescript_string_enums_1.Enum('CNPJ', 'CPF', 'SSN');
exports.DebitCard = typescript_string_enums_1.Enum('Visa Electron', 'Maestro', 'Mastercard Debit');
exports.CreditCard = typescript_string_enums_1.Enum('Visa', 'Mastercard', 'American Express', 'Discover', 'JCB', 'Diners', 'Elo', 'Hipercard', 'Aura', 'Benricompras', 'Credz', 'Cabal');
exports.DirectSale = typescript_string_enums_1.Enum('Venda Direta Credito', 'Venda Direta Debito');
exports.AdhocCard = typescript_string_enums_1.Enum('Cobranded', 'Privatelabels');
exports.BankInvoice = typescript_string_enums_1.Enum('BankInvoice');
exports.Generic = typescript_string_enums_1.Enum('Promissories', 'Cash');
exports.Voucher = typescript_string_enums_1.Enum('SPEI', 'Safetypay');
exports.Cryptocurrency = typescript_string_enums_1.Enum('Bitcoin');
const isCardAuthorization = (authorization) => typeof authorization.card !== 'undefined';
exports.isCardAuthorization = isCardAuthorization;
const isCreditCardAuthorization = (authorization) => ramda_1.contains(authorization.paymentMethod, typescript_string_enums_1.Enum.values(exports.CreditCard));
exports.isCreditCardAuthorization = isCreditCardAuthorization;
const isDebitCardAuthorization = (authorization) => ramda_1.contains(authorization.paymentMethod, typescript_string_enums_1.Enum.values(exports.DebitCard));
exports.isDebitCardAuthorization = isDebitCardAuthorization;
const isBankInvoiceAuthorization = (authorization) => authorization.paymentMethod === 'BankInvoice';
exports.isBankInvoiceAuthorization = isBankInvoiceAuthorization;
const isDirectSaleAuthorization = (authorization) => ramda_1.contains(authorization.paymentMethod, typescript_string_enums_1.Enum.values(exports.DirectSale));
exports.isDirectSaleAuthorization = isDirectSaleAuthorization;
const isTokenizedCard = (card) => typeof card.numberToken !== 'undefined';
exports.isTokenizedCard = isTokenizedCard;
