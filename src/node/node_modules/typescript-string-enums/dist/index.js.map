{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAKA;IAAqB,gBAAgB;SAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;QAAhB,2BAAgB;;IACjC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;QAChC,IAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,GAAG,CAAC,CAAgB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;YAArB,IAAM,KAAK,eAAA;YACZ,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;SACzB;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;AACL,CAAC;AAVD,oBAUC;AAID,WAAiB,IAAI;IACjB,gBAEE,CAAI;QACF,IAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,GAAG,CAAC,CAAc,UAAc,EAAd,KAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAd,cAAc,EAAd,IAAc;YAA3B,IAAM,GAAG,SAAA;YACV,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;SACrB;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IARe,WAAM,SAQrB,CAAA;IAED,cAEE,CAAI;QACF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAmB,CAAC;IAC5C,CAAC;IAJe,SAAI,OAInB,CAAA;IAED,gBAEE,CAAI;QACF,IAAM,MAAM,GAAmB,EAAE,CAAC;QAClC,GAAG,CAAC,CAAc,UAAc,EAAd,KAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAd,cAAc,EAAd,IAAc;YAA3B,IAAM,GAAG,SAAA;YACV,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACvB;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IARe,WAAM,SAQrB,CAAA;IAED,gBAEE,CAAI,EAAE,KAAU;QACd,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC;IAJe,WAAM,SAIrB,CAAA;AACL,CAAC,EAhCgB,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAgCpB","sourcesContent":["export function Enum<V extends string>(...values: V[]): { [K in V]: K };\nexport function Enum<\n    T extends { [_: string]: V },\n    V extends string\n>(definition: T): T;\nexport function Enum(...values: any[]): object {\n    if (typeof values[0] === \"string\") {\n        const result: any = {};\n        for (const value of values) {\n            result[value] = value;\n        }\n        return result;\n    } else {\n        return values[0];\n    }\n}\n\nexport type Enum<T extends object> = T[keyof T];\n\nexport namespace Enum {\n    export function ofKeys<\n        T extends { [_: string]: any}\n    >(e: T): { [K in keyof T]: K } {\n        const result: any = {};\n        for (const key of Object.keys(e)) {\n            result[key] = key;\n        }\n        return result;\n    }\n\n    export function keys<\n        T extends { [_: string]: any }\n    >(e: T): Array<keyof T> {\n        return Object.keys(e) as Array<keyof T>;\n    }\n\n    export function values<\n        T extends { [_: string]: any }\n    >(e: T): Array<Enum<T>> {\n        const result: Array<Enum<T>> = [];\n        for (const key of Object.keys(e)) {\n            result.push(e[key]);\n        }\n        return result;\n    }\n\n    export function isType<\n        T extends { [_: string]: any }\n    >(e: T, value: any): value is Enum<T> {\n        return values(e).indexOf(value) !== -1;\n    }\n}\n"]}