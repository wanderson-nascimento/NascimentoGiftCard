export declare function Enum<V extends string>(...values: V[]): {
    [K in V]: K;
};
export declare function Enum<T extends {
    [_: string]: V;
}, V extends string>(definition: T): T;
export declare type Enum<T extends object> = T[keyof T];
export declare namespace Enum {
    function ofKeys<T extends {
        [_: string]: any;
    }>(e: T): {
        [K in keyof T]: K;
    };
    function keys<T extends {
        [_: string]: any;
    }>(e: T): Array<keyof T>;
    function values<T extends {
        [_: string]: any;
    }>(e: T): Array<Enum<T>>;
    function isType<T extends {
        [_: string]: any;
    }>(e: T, value: any): value is Enum<T>;
}
